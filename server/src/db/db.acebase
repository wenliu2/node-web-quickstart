import { AceBase, AceBaseLocalSettings } from "acebase"
import { assert } from "console"

let db: AceBase = null

export async function init() {
    const options: AceBaseLocalSettings = {
        logLevel: "log",
        storage: { path: `${process.env.DB_PATH}` }
    }
    db = new AceBase('mydb001', options)
    await db.ready()
    console.log("db is ready.")
}

/**
 * generate next sequence value for the given collection.
 * reserve `size` numbers, next sequence will start from [current value] + size
 * @param collection 
 * @param size 
 * @returns  start sequence number assigned
 */
export async function sequence(collection: string, size: number = 1): Promise<number>{
    assert(size >= 0)

    const ref = await db.ref(`sequence/${collection}`).transaction( snap => {
        const value = snap.val()
        if ( value ) {
            return {value: value.value + size}
        } else {
            return {value: size}
        }
    })
    const v = (await ref.get()).val()
    return v.value - size
}

export function get_db() {
    return db
}